name: Provision Infra and Deploy to GKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID_PROD }}
  GKE_CLUSTER: 'gke-standard-cluster'
  GKE_LOCATION: 'us-central1'
  IMAGE: api-nestjs

permissions:
  contents: read
  id-token: write

jobs:
  # --- JOB 1: PROVISIONAMENTO DA INFRAESTRUTURA (CLUSTER GKE) ---
  provision-infrastructure:
    name: Provision GKE Cluster
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (Infra)
        run: terraform init
        working-directory: ./infra # Executa na pasta de infra

      - name: Terraform Apply (Infra)
        run: terraform apply -auto-approve
        working-directory: ./infra # Executa na pasta de infra

  # --- JOB 2: DEPLOY DA CONFIGURAÇÃO K8S E DA APLICAÇÃO ---
  deploy-to-k8s:
    name: Deploy K8s Config and Application
    runs-on: ubuntu-latest
    needs: provision-infrastructure # Depende da criação do cluster

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      # Configura o kubectl para falar com o cluster criado
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_LOCATION }}

      # --- ETAPA DE CONFIGURAÇÃO DO KUBERNETES COM TERRAFORM ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (K8s)
        run: terraform init
        working-directory: ./k8s # Executa na pasta k8s

      - name: Terraform Apply (K8s)
        run: terraform apply -auto-approve
        working-directory: ./k8s # Executa na pasta k8s

      # --- ETAPA DE DEPLOY DA APLICAÇÃO (SEU CÓDIGO ORIGINAL) ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:${{ github.sha }}

      # Seus passos para criar manifests e fazer o deploy da API
      - name: Deploy API to GKE
        run: |
          # Use manifests salvos no repo ou continue criando-os aqui
          echo "apiVersion: v1
          kind: Secret
          metadata:
            name: api-database-secret
            namespace: production
          type: Opaque
          data:
            DATABASE_URL: cG9zdGdyZXNxbDovL3Bvc3RncmVzOjUyMzVAcG9zdGdyZXMtc2VydmljZTo1NDMyL3Bvc3RncmVzP3NjaGVtYT1wdWJsaWM=" | kubectl apply -f -

          echo "apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: api-deployment
            namespace: production
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: api
            template:
              metadata:
                labels:
                  app: api
              spec:
                containers:
                  - name: api
                    image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:${{ github.sha }}
                    ports:
                      - containerPort: 8080
                    env:
                      - name: DATABASE_URL
                        valueFrom:
                          secretKeyRef:
                            name: api-database-secret
                            key: DATABASE_URL
                    envFrom:
                      - secretRef:
                          name: postgres-secrets" | kubectl apply -f -

          echo "apiVersion: v1
          kind: Service
          metadata:
            name: api-service
            namespace: production
            annotations:
              prometheus.io/scrape: 'true'   # Habilita a coleta
              prometheus.io/port: '8080'
          spec:
            selector:
              app: api
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
            type: ClusterIP" | kubectl apply -f -

          kubectl rollout restart deployment api-deployment -n production