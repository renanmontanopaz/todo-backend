name: Deploy to GKE
# pipeline
on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: api-deployment
  IMAGE: api-nestjs

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Configuração do Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login no Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build e push da imagem Docker
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api-nestjs:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Configuração do Google Cloud SDK
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      # Configuração do kubectl
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: us-central1
          project_id: ${{ secrets.PROJECT_ID }}

      # Criação dos arquivos de deploy
      - name: Create API deployment file
        run: |
          cat <<EOF > api-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: api-deployment
            namespace: production
            labels:
              app: api
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: api
            template:
              metadata:
                labels:
                  app: api
              spec:
                containers:
                  - name: api
                    image: ${{ secrets.DOCKER_USERNAME }}/api-nestjs:${{ github.sha }}
                    ports:
                      - containerPort: 8080
                    env:
                      - name: DATABASE_URL
                        valueFrom:
                          secretKeyRef:
                            name: api-database-secret
                            key: DATABASE_URL
                    envFrom:
                      - secretRef:
                          name: postgres-secrets
          EOF

      - name: Create API service file
        run: |
          cat <<EOF > api-service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: api-service
            namespace: production
          spec:
            selector:
              app: api
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
            type: ClusterIP
          EOF

      - name: Create API database secret
        run: |
          cat <<EOF > api-database-secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: api-database-secret
            namespace: production
          type: Opaque
          data:
            DATABASE_URL: cG9zdGdyZXNxbDovL3Bvc3RncmVzOjUyMzVAcG9zdGdyZXMtc2VydmljZTo1NDMyL3Bvc3RncmVzP3NjaGVtYT1wdWJsaWM=
          EOF

      # Deploy no Kubernetes
      - name: Deploy to GKE
        run: |
          kubectl apply -f api-database-secret.yaml
          kubectl apply -f api-deployment.yaml
          kubectl apply -f api-service.yaml
          kubectl rollout restart deployment api-deployment -n production
