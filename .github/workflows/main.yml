name: Provision Infra and Deploy to GKE

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: 'autopilot-cluster-stage' # Nome definido no seu arquivo terraform (main.tf)
  GKE_LOCATION: 'us-central1'         # Localização definida no seu arquivo terraform (main.tf)
  IMAGE: api-nestjs

permissions:
  contents: read
  id-token: write # Permissão necessária para autenticação segura no GCP

jobs:
  # --- JOB 1: PROVISIONAMENTO DA INFRAESTRUTURA COM TERRAFORM ---
  provision-infrastructure:
    name: Provision GKE Cluster
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

  # --- JOB 2: BUILD E DEPLOY DA APLICAÇÃO (DEPENDE DO JOB 1) ---
  build-and-deploy-app:
    name: Build and Deploy Application
    runs-on: ubuntu-latest
    needs: provision-infrastructure # Garante que este job só rode após o sucesso do job de infraestrutura

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_LOCATION }}
          project_id: ${{ env.PROJECT_ID }}

      # Seus passos para criar manifests e fazer o deploy continuam os mesmos
      - name: Create API deployment file
        run: |
          cat <<EOF > api-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: api-deployment
            namespace: production
            labels:
              app: api
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: api
            template:
              metadata:
                labels:
                  app: api
              spec:
                containers:
                  - name: api
                    image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:${{ github.sha }}
                    ports:
                      - containerPort: 8080
                    env:
                      - name: DATABASE_URL
                        valueFrom:
                          secretKeyRef:
                            name: api-database-secret
                            key: DATABASE_URL
                    envFrom:
                      - secretRef:
                          name: postgres-secrets
          EOF

      - name: Create API service file
        run: |
          cat <<EOF > api-service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: api-service
            namespace: production
          spec:
            selector:
              app: api
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
            type: ClusterIP
          EOF

      - name: Create API database secret
        run: |
          cat <<EOF > api-database-secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: api-database-secret
            namespace: production
          type: Opaque
          data:
            DATABASE_URL: cG9zdGdyZXNxbDovL3Bvc3RncmVzOjUyMzVAcG9zdGdyZXMtc2VydmljZTo1NDMyL3Bvc3RncmVzP3NjaGVtYT1wdWJsaWM=
          EOF

      - name: Deploy to GKE
        run: |
          kubectl apply -f api-database-secret.yaml
          kubectl apply -f api-deployment.yaml
          kubectl apply -f api-service.yaml
          kubectl rollout restart deployment api-deployment -n production